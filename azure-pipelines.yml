trigger:
  branches:
    include:
    - msix
    - rel/*
  paths:
    exclude:
    - '**/*.md'

pr:
  branches:
    include:
    - master
    - rel/*
  paths:
    exclude:
    - '**/*.md'

variables:
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
- job: Build
  pool:
    vmImage: windows-2019

  strategy:
    matrix:
      Channel_Prod_Web:
        ChannelName: Prod-Web
        DistributionUrl: https://appinstallerdemo.azurewebsites.net/ContosoDev
        MsixPackageId: HeadTrax
        MsixPublisherId: CN=Contoso Software (FOR LAB USE ONLY), O=Contoso Corporation, C=US
        MsixPackageDisplayName: HeadTrax
        MsixBuildMode: SideLoadOnly
        #MsixGenerateAppInstaller: true

  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK 3.0.x'
    inputs:
      version: 3.0.x

  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv
    displayName: Install NBGV tool

  - script: nbgv cloud -c -a
    displayName: Set Version

  - task: PowerShell@2
    inputs:
     targetType: 'inline'
     script: |
       Enable-WindowsOptionalFeature -Online -FeatureName  Microsoft-Hyper-V -All -Force
    displayName: Setup Hyper-V

  - powershell: |
      # Update appxmanifest. This must be done before build.
      # Set the per-channel values into the appxmanifest, replacing the checked-in values
      [xml]$manifest= get-content ".\HeadTraxPackage\Package.appxmanifest"
      $manifest.Package.Identity.Version = "$(GitBuildVersionSimple).0"
      $manifest.Package.Identity.Name = "$(MsixPackageId)"
      $manifest.Package.Identity.Publisher = "$(MsixPublisherId)"
      $manifest.Package.Properties.DisplayName = "$(MsixPackageDisplayName)"
      $manifest.Package.Applications.Application.VisualElements.DisplayName = "$(MsixPackageDisplayName)"
      $manifest.save(".\HeadTraxPackage\Package.appxmanifest")
    displayName: Update manifest
  - powershell: |
      # Update appinstaller file
      [xml]$file= get-content ".\HeadTraxPackage\Package.appinstaller"
      $file.AppInstaller.Uri = "$(DistributionUrl)/HeadTrax.appinstaller"
      $file.AppInstaller.Version = "$(GitBuildVersionSimple).0"
      $file.AppInstaller.MainPackage.Name = "$(MsixPackageId)"
      $file.AppInstaller.MainPackage.Version = "$(GitBuildVersionSimple).0"
      $file.AppInstaller.MainPackage.Publisher = "$(MsixPublisherId)"
      $file.AppInstaller.MainPackage.Uri = "$(DistributionUrl)/HeadTraxPackage_$(GitBuildVersionSimple).0_x64.msix"
      $file.save(".\HeadTraxPackage\HeadTrax.appinstaller")
    displayName: Update appinstaller file
  - task: MSBuild@1
    displayName: Build for $(BuildConfiguration)
    inputs:
      solution: HeadTrax.sln
      platform: x64
      msbuildArguments: /restore /p:AppInstallerUri=$(DistributionUrl) /p:MainPackageUri=$(DistributionUrl) /p:UapAppxPackageBuildMode=$(MsixBuildMode) /p:GenerateAppInstallerFile=$(MsixGenerateAppInstaller)
      configuration: $(BuildConfiguration)
      maximumCpuCount: false

  - script: copy .\HeadTraxPackage\HeadTrax.appinstaller HeadTraxPackage\AppPackages\HeadTraxPackage_$(GitBuildVersionSimple).0_x64_Test\HeadTrax.appinstaller
    displayName: Copy appinstaller file
    condition: succeeded()

  - task: PowerShell@2
    inputs:
     targetType: 'inline'
     script: |
       New-VHD -SizeBytes 5MB -Path c:\temp\headtrax1.vhd -Dynamic -Confirm:$false
       $vhdObject = Mount-VHD c:\temp\headtrax1.vhd -Passthru
       $disk = Initialize-Disk -Passthru -Number $vhdObject.Number
       $partition = New-Partition -AssignDriveLetter -UseMaximumSize -DiskNumber $disk.Number
       Format-Volume -FileSystem NTFS -Confirm:$false -DriveLetter $partition.DriveLetter -Force
       $dirPath = $partition.DriveLetter + ':\HeadTraxRoot'
       New-Item -Path $dirPath -ItemType Directory
      
       cd msixmgr\x64
       $packagePath = HeadTraxPackage\AppPackages\HeadTraxPackage_$(GitBuildVersionSimple).0_x64_Test\HeadTraxPackage_$(GitBuildVersionSimple).0_x64.msix
       .\msixmgr.exe -Unpack -packagePath $packagePath -destination $dirPath -applyacls

    displayName: One Generate Expanded MSIX + VHD

#Generate MSIX app attach VHD
  - powershell: |
      # Update appinstaller file
      New-VHD -SizeBytes 5MB -Path c:\temp\headtrax.vhd -Dynamic -Confirm:$false
      $vhdObject = Mount-VHD c:\temp\headtrax.vhd -Passthru
      $disk = Initialize-Disk -Passthru -Number $vhdObject.Number
      $partition = New-Partition -AssignDriveLetter -UseMaximumSize -DiskNumber $disk.Number
      Format-Volume -FileSystem NTFS -Confirm:$false -DriveLetter $partition.DriveLetter -Force
      $dirPath = $partition.DriveLetter + ':\HeadTraxRoot'
      New-Item -Path $dirPath -ItemType Directory

      cd msixmgr\x64
      $packagePath = HeadTraxPackage\AppPackages\HeadTraxPackage_$(GitBuildVersionSimple).0_x64_Test\HeadTraxPackage_$(GitBuildVersionSimple).0_x64.msix
      .\msixmgr.exe -Unpack -packagePath $packagePath -destination $dirPath -applyacls

     # $file.AppInstaller.MainPackage.Uri = "$(DistributionUrl)/HeadTraxPackage_$(GitBuildVersionSimple).0_x64.msix"
     # $file.save(".\HeadTraxPackage\HeadTrax.appinstaller")
    displayName: Generate Expanded MSIX + VHD

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: $(ChannelName)
      targetPath: HeadTraxPackage/AppPackages